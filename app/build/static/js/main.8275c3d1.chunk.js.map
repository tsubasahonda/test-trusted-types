{"version":3,"sources":["utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["appPolicy","rules","createHTML","i","createURL","unsafe","console","log","unsafeurl","URL","currenturl","window","location","href","origin","Error","toString","getPolicy","undefined","tt","createPolicy","App","useState","hrefText","setHrefText","setHref","untrustedHrefText","setUntrustedHrefText","untrustedHref","setUntrustedHref","className","type","value","onChange","e","target","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAkBIA,E,uEAdEC,EAAQ,CACZC,WAFW,SAACC,GAAD,OAAYA,GAGvBC,UAAW,SAACC,GACVC,QAAQC,IAAI,YAAaF,GACzB,IAAMG,EAAY,IAAIC,IAAIJ,EAAQ,yBAC5BK,EAAa,IAAID,IAAIE,OAAOC,SAASC,KAAM,yBACjD,GAAIL,EAAUM,SAAWJ,EAAWI,OAClC,MAAM,IAAIC,MAAM,4BAElB,OAAOP,EAAUQ,aAQRC,EAAY,WAKD,YAJgBC,IAAdlB,IACtBA,EAAYmB,IAAGC,aAAa,aAAcnB,IAGfD,GCyBhBqB,EA9CO,WAAO,IAAD,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,OAEFF,mBAAS,IAFP,mBAEnBT,EAFmB,KAEbY,EAFa,OAGwBH,mBAAS,IAHjC,mBAGnBI,EAHmB,KAGAC,EAHA,OAIgBL,mBAAS,IAJzB,mBAInBM,EAJmB,KAIJC,EAJI,KAM1B,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,6BAEE,uBAAGjB,KAAMI,IAAYb,UAAU,UAC7B,2CASJ,6BACE,2BACGS,GAAQ,uBAAGA,KAAMI,IAAYb,UAAUS,IAA/B,0BACT,2BACEkB,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAYU,EAAEC,OAAOH,UAExC,4BAAQI,QAAS,kBAAMX,EAAQF,KAA/B,aAEF,2BACGK,GAAiB,uBAAGf,KAAMe,GAAT,8BAClB,2BACEG,KAAK,OACLC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAAqBO,EAAEC,OAAOH,UAEjD,4BAAQI,QAAS,kBAAMP,EAAiBH,KAAxC,2BC/BQW,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8275c3d1.chunk.js","sourcesContent":["import tt from 'trusted-types';\n// import { URL } from 'url';\n\nconst noop = (i: any) => i\nconst rules = {\n  createHTML: noop,\n  createURL: (unsafe: string) => {\n    console.log('createURL', unsafe)\n    const unsafeurl = new URL(unsafe, 'http://localhost:3000');\n    const currenturl = new URL(window.location.href, 'http://localhost:3000')\n    if (unsafeurl.origin !== currenturl.origin) {\n      throw new Error('url of unexpected origin')\n    }\n    return unsafeurl.toString();\n    \n  }\n}\n\nlet appPolicy: any;\nlet withTrustedTypes = true\n\nexport const getPolicy = () => {\n  if (withTrustedTypes && appPolicy === undefined) {\n    appPolicy = tt.createPolicy('app-policy', rules)\n  }\n\n  if (withTrustedTypes) return appPolicy\n  else return rules\n}\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport './App.css';\nimport { getPolicy } from './utils';\n\nconst App: React.FC = () => {\n  const [hrefText, setHrefText] = useState('');\n  const [href, setHref] = useState('');\n  const [untrustedHrefText, setUntrustedHrefText] = useState(\"\");\n  const [untrustedHref, setUntrustedHref] = useState(\"\");\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <div>\n          {/* <img src={'x'} onError={e => {e.preventDefault(); alert(2);}} alt='hoge' /> */}\n          <a href={getPolicy().createURL('/xss2')}>\n            <button>Xss 2</button>\n          </a>\n          {/* <a href={getPolicy().createURL('/xss-hacky3?html=<img%20src=%27x%27%20onerror=\"alert(1)\"')}>\n            <button>Xss 3</button>\n          </a>\n          <a href={getPolicy().createURL('/xss-hacky4?html=<img%20src=%27x%27%20onerror=\"alert(1)\"')}>\n            <button>Xss 4</button>\n          </a> */}\n        </div>\n        <div>\n          <p>\n            {href && <a href={getPolicy().createURL(href)}>Link with trusted href</a>}\n            <input\n              type=\"text\"\n              value={hrefText}\n              onChange={(e) => setHrefText(e.target.value)}\n            />\n            <button onClick={() => setHref(hrefText)}>Set href</button>\n          </p>\n          <p>\n            {untrustedHref && <a href={untrustedHref}>Link with NON trusted href</a>}\n            <input\n              type=\"text\"\n              value={untrustedHrefText}\n              onChange={(e) => setUntrustedHrefText(e.target.value)}\n            />\n            <button onClick={() => setUntrustedHref(untrustedHrefText)}>Set untrusted href</button>\n          </p>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}