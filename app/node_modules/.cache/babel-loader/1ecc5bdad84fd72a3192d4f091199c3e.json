{"ast":null,"code":"import tt from 'trusted-types'; // import { URL } from 'url';\n\nconst noop = i => i;\n\nconst rules = {\n  createHTML: noop,\n  createURL: unsafe => {\n    console.log('createURL');\n    const unsafeurl = new URL('/app');\n    const currenturl = new URL(window.location.href);\n\n    if (unsafeurl.origin !== currenturl.origin) {\n      throw new Error('url of unexpected origin');\n    }\n\n    return unsafeurl.toString();\n  }\n};\nlet appPolicy;\nlet withTrustedTypes = true;\nexport const getPolicy = () => {\n  if (withTrustedTypes && appPolicy === undefined) {\n    appPolicy = tt.createPolicy('app-policy', rules);\n  }\n\n  if (withTrustedTypes) return appPolicy;else return rules;\n};","map":{"version":3,"sources":["/Users/myaaaicey/Documents/playground/test-trusted-types/app/src/utils.ts"],"names":["tt","noop","i","rules","createHTML","createURL","unsafe","console","log","unsafeurl","URL","currenturl","window","location","href","origin","Error","toString","appPolicy","withTrustedTypes","getPolicy","undefined","createPolicy"],"mappings":"AAAA,OAAOA,EAAP,MAAe,eAAf,C,CACA;;AAEA,MAAMC,IAAI,GAAIC,CAAD,IAAYA,CAAzB;;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,UAAU,EAAEH,IADA;AAEZI,EAAAA,SAAS,EAAGC,MAAD,IAAoB;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQ,MAAR,CAAlB;AACA,UAAMC,UAAU,GAAG,IAAID,GAAJ,CAAQE,MAAM,CAACC,QAAP,CAAgBC,IAAxB,CAAnB;;AACA,QAAIL,SAAS,CAACM,MAAV,KAAqBJ,UAAU,CAACI,MAApC,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,WAAOP,SAAS,CAACQ,QAAV,EAAP;AAED;AAXW,CAAd;AAcA,IAAIC,SAAJ;AACA,IAAIC,gBAAgB,GAAG,IAAvB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,MAAID,gBAAgB,IAAID,SAAS,KAAKG,SAAtC,EAAiD;AAC/CH,IAAAA,SAAS,GAAGlB,EAAE,CAACsB,YAAH,CAAgB,YAAhB,EAA8BnB,KAA9B,CAAZ;AACD;;AAED,MAAIgB,gBAAJ,EAAsB,OAAOD,SAAP,CAAtB,KACK,OAAOf,KAAP;AACN,CAPM","sourcesContent":["import tt from 'trusted-types';\n// import { URL } from 'url';\n\nconst noop = (i: any) => i\nconst rules = {\n  createHTML: noop,\n  createURL: (unsafe: string) => {\n    console.log('createURL')\n    const unsafeurl = new URL('/app');\n    const currenturl = new URL(window.location.href)\n    if (unsafeurl.origin !== currenturl.origin) {\n      throw new Error('url of unexpected origin')\n    }\n    return unsafeurl.toString();\n    \n  }\n}\n\nlet appPolicy: any;\nlet withTrustedTypes = true\n\nexport const getPolicy = () => {\n  if (withTrustedTypes && appPolicy === undefined) {\n    appPolicy = tt.createPolicy('app-policy', rules)\n  }\n\n  if (withTrustedTypes) return appPolicy\n  else return rules\n}\n"]},"metadata":{},"sourceType":"module"}