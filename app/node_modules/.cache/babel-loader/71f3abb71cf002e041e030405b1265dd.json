{"ast":null,"code":"import tt from'trusted-types';// import { URL } from 'url';\nvar noop=function noop(i){return i;};var rules={createHTML:noop,createURL:function createURL(unsafe){console.log('createURL',unsafe);var unsafeurl=new URL(unsafe,'http://localhost:3000');var currenturl=new URL(window.location.href,'http://localhost:3000');if(unsafeurl.origin!==currenturl.origin){throw new Error('url of unexpected origin');}return unsafeurl.toString();}};var appPolicy;var withTrustedTypes=true;export var getPolicy=function getPolicy(){if(withTrustedTypes&&appPolicy===undefined){appPolicy=tt.createPolicy('app-policy',rules);}if(withTrustedTypes)return appPolicy;else return rules;};","map":{"version":3,"sources":["/Users/myaaaicey/Documents/playground/test-trusted-types/app/src/utils.ts"],"names":["tt","noop","i","rules","createHTML","createURL","unsafe","console","log","unsafeurl","URL","currenturl","window","location","href","origin","Error","toString","appPolicy","withTrustedTypes","getPolicy","undefined","createPolicy"],"mappings":"AAAA,MAAOA,CAAAA,EAAP,KAAe,eAAf,CACA;AAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,CAAD,QAAYA,CAAAA,CAAZ,EAAb,CACA,GAAMC,CAAAA,KAAK,CAAG,CACZC,UAAU,CAAEH,IADA,CAEZI,SAAS,CAAE,mBAACC,MAAD,CAAoB,CAC7BC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBF,MAAzB,EACA,GAAMG,CAAAA,SAAS,CAAG,GAAIC,CAAAA,GAAJ,CAAQJ,MAAR,CAAgB,uBAAhB,CAAlB,CACA,GAAMK,CAAAA,UAAU,CAAG,GAAID,CAAAA,GAAJ,CAAQE,MAAM,CAACC,QAAP,CAAgBC,IAAxB,CAA8B,uBAA9B,CAAnB,CACA,GAAIL,SAAS,CAACM,MAAV,GAAqBJ,UAAU,CAACI,MAApC,CAA4C,CAC1C,KAAM,IAAIC,CAAAA,KAAJ,CAAU,0BAAV,CAAN,CACD,CACD,MAAOP,CAAAA,SAAS,CAACQ,QAAV,EAAP,CAED,CAXW,CAAd,CAcA,GAAIC,CAAAA,SAAJ,CACA,GAAIC,CAAAA,gBAAgB,CAAG,IAAvB,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B,GAAID,gBAAgB,EAAID,SAAS,GAAKG,SAAtC,CAAiD,CAC/CH,SAAS,CAAGlB,EAAE,CAACsB,YAAH,CAAgB,YAAhB,CAA8BnB,KAA9B,CAAZ,CACD,CAED,GAAIgB,gBAAJ,CAAsB,MAAOD,CAAAA,SAAP,CAAtB,IACK,OAAOf,CAAAA,KAAP,CACN,CAPM","sourcesContent":["import tt from 'trusted-types';\n// import { URL } from 'url';\n\nconst noop = (i: any) => i\nconst rules = {\n  createHTML: noop,\n  createURL: (unsafe: string) => {\n    console.log('createURL', unsafe)\n    const unsafeurl = new URL(unsafe, 'http://localhost:3000');\n    const currenturl = new URL(window.location.href, 'http://localhost:3000')\n    if (unsafeurl.origin !== currenturl.origin) {\n      throw new Error('url of unexpected origin')\n    }\n    return unsafeurl.toString();\n    \n  }\n}\n\nlet appPolicy: any;\nlet withTrustedTypes = true\n\nexport const getPolicy = () => {\n  if (withTrustedTypes && appPolicy === undefined) {\n    appPolicy = tt.createPolicy('app-policy', rules)\n  }\n\n  if (withTrustedTypes) return appPolicy\n  else return rules\n}\n"]},"metadata":{},"sourceType":"module"}